# Theory Assignment: 


1. What is `NPM`? 


-  npm is a node js package manager used for managing our packages.
-  It's is world's largest software registry
-  used to share and borrow packages-  manage private development

Npm has three components 
      - website => discover and manage packages
      - command line interface => runs from terminal
      - registry => large public database of javascsript software and the meta information surrounding it .


/////////////////Use npm to . . .///////////////////////////
--------------Adapt packages of code for your apps
You define all your project's dependencies inside your package. json file. Anytime you or a team member needs to get started with your project, all they have to do is run npm install. This will immediately install all the necessary dependencies for your project.


-------------Download standalone tools


--------------Run packages without downloading using npx.
The npx stands for Node Package Execute and is included with npm; if you install npm above 5.2. 0, npx will be installed automatically. It's a npm package runner that can execute any package from the npm registry without ever installing it.
You can use npx followed by the package name and command to execute it. For example, instead of npm install -g <package> , you can run npx <package> . This way, the package will be temporarily downloaded and executed without the need for a global installation.



--------------Share code with any npm user, anywhere.



---------------Restrict code to specific developers.



----------------Create organizations to coordinate package maintenance, coding, and developers.
-----------------Form virtual teams by using organizations.
-----------------Manage multiple versions of code and code dependencies.
---------------Update applications easily when underlying code is updated.
----------------Discover multiple ways to solve the same puzzle.
-----------------Find other developers who are working on similar problems and projects.


2. What is `Parcel/Webpack`? Why do we need it? 
Parcel combines a great out-of-the-box development experience with a scalable architecture that can take your project from just getting started to massive production application.

Parcel starts with a great development experience, from starting a new project, to iterating and debugging, and shipping to production. No more fiddling with configuration, or spending hours to keep up with best practices ‚Äì it just works!

Parcel's JavaScript compiler, CSS transformer, and source maps implementation are written in Rust for maximum performance. It's 10-20x faster than other JavaScript-based tools!
Parcel's JavaScript compiler is built on SWC, which handles transpiling JavaScript, JSX, and TypeScript. On top of SWC, Parcel implements dependency collection, bundling, scope hoisting, tree shaking, Node emulation, hot reloading, and more.

Parcel's CSS transformer and minifier is built in Rust on top of the browser-grade CSS parser used in Firefox. It's over 100x faster than other JavaScript-based transformers and minifiers.

What parcel does 
      - dev server
      - hot reloading
      - zero configuration
      - diagnostics
      - native performance
      - multi-core
      - reliable caching
      - lazy dev builds
      - tree shaking
      - minification
      - image optimisation
      - compression
      - code splitting
      - content hashing
      - transpilation
      - differential bundling
      - workers
      - libraries
      - simple configuration
      - powerful plugins
      - named pipelines
      - designed for performance
      - API


Parcel automatically tracks all of the files, configuration, plugins, and dev dependencies that are involved in your build, and granularly invalidates the cache when something changes. It integrates with low-level operating system APIs to determine what files have changed in milliseconds, no matter the project size.


Parcel. js is an open-source bundler. It supports many popular languages like Typescript and SASS, and can also handle file types like images and fonts. Parcel comes with a few extra tools built-in: a development server, diagnostics, minification, and even image compression.

3. What is `.parcel-cache` ?

from someone's LinkedIn projects

üëã Hey LinkedIn fam! Today, let's talk about the mysterious `.parcel-cache` directory that you might have come across in your web development projects. üìÇüöÄ

üîç `.parcel-cache` is a directory generated by the Parcel bundler, a popular tool used for bundling and optimizing web applications. It serves a specific purpose in the build process. Let's explore! üí°

‚ú® Parcel, as a zero-configuration bundler, aims to provide a seamless development experience. To achieve this, it employs an intelligent caching mechanism. When Parcel bundles your project for the first time, it creates the `.parcel-cache` directory to store cached data. üì¶üîí

üîÄ The purpose of this cache directory is to speed up subsequent builds. Parcel analyzes your project's dependencies, transformations, and optimizations, and stores the results in the cache. This way, if you make changes to your code and trigger a rebuild, Parcel can quickly retrieve the cached data and only process the modified parts, saving time and resources. üïí‚ö°

üí° Why is `.parcel-cache` useful?
1Ô∏è‚É£ Faster Builds: By caching the intermediate results, Parcel avoids redoing expensive computations, leading to significantly faster build times. ‚ö°üöÄ

2Ô∏è‚É£ Efficient Development Workflow: With the help of caching, Parcel intelligently determines which parts of your codebase require reprocessing, allowing for a smoother development experience. üîÑüíª

3Ô∏è‚É£ Reduced Resource Usage: The cache minimizes the utilization of system resources, such as CPU and memory, as it avoids unnecessary operations during subsequent builds. üí™üíæ

üîí It's worth noting that the `.parcel-cache` directory is automatically managed by Parcel, and you generally don't need to interact with it directly. However, if you encounter issues related to caching, clearing the cache by deleting the directory can often resolve them. üóëÔ∏èüöß

In summary, `.parcel-cache` is a directory generated by the Parcel bundler, serving as a cache for storing intermediate build results. It enhances the development workflow by speeding up subsequent builds and optimizing resource usage. ‚öôÔ∏è‚ú®

4. What is `npx` ? 

The npx stands for Node Package Execute and it comes with the npm, when you installed npm above 5.2. 0 version then automatically npx will installed. It is an npm package runner that can execute any package that you want from the npm registry without even installing that package.


5. What is difference between `dependencies` vs `devDependencies`?

"dependencies" : Packages required by your application in production. "devDependencies" : Packages that are only needed for local development and testing.

6. What is Tree Shaking? 
Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code.

It relies on the import and export statements to detect if code modules are exported and imported for use between JavaScript files.

In modern JavaScript applications, we use module bundlers (e.g., webpack or Rollup) to automatically remove dead code when bundling multiple JavaScript files into single files. This is important for preparing code that is production ready, for example with clean structures and minimal file size.

7. What is Hot Module Replacement? 

Hot Module Replacement (HMR) is a powerful feature designed to enhance the development process by providing real-time updates to modules within a running application. The beauty of HMR lies in its ability to make these updates without requiring a full page reload, thereby saving valuable time during development.

At its core, HMR operates by emitting an "update" that contains a new compilation hash and a list of updated chunks. These chunks contain the new code for the updated modules. The compiler ensures consistency between builds by storing module and chunk IDs.

In practice, HMR checks for updates, downloads them, and applies them synchronously. This process is facilitated through the HMR runtime which supports two methods: check and apply. The check method makes an HTTP request to the update manifest to check for updates, while the apply method flags updated modules as invalid and applies the updates.

8. List down your favourite 5 superpowers of Parcel and describe any 3 of them in your 
 own words. 
 Automatic production optimization.
Parcel optimizes your whole app for production automatically. This includes tree-shaking and minifying your JavaScript, CSS, and HTML, resizing and optimizing images, content hashing, automatic code splitting, and much more.


9. What is `.gitignore`? What should we add and not add into it?
The purpose of gitignore files is to ensure that certain files not tracked by Git remain untracked.

To stop tracking a file that is currently tracked, use git rm --cached to remove the file from the index. The filename can then be added to the .gitignore file to stop the file from being reintroduced in later commits.

Git does not follow symbolic links when accessing a .gitignore file in the working tree. This keeps behavior consistent when the file is accessed from the index or a tree versus from the filesystem.


10. What is the difference between `package.json` and `package-lock.json` ?

the package.json file focuses on project metadata and specifying the desired versions of dependencies, while the package-lock.json file ensures deterministic installations by locking the exact versions of dependencies and their dependencies. Both files are essential for managing dependencies, but they serve different purposes in the Node.js development workflow.

11. Why should I not modify `package-lock.json`?  

Lock files should exist so that anyone installing the dependencies get the exact same version. In my mind, lock files should not be modified unless you are actively updating the packages required. It seems that sometimes, however, npm decides to update the package-lock.

12. What is `node_modules` ? Is it a good idea to push that on git? 

The node_modules folder contains every installed dependency for your project. In most cases, you should not commit this folder into your version controlled repository. As you install more dependencies, the size of this folder will quickly grow. 


Check node_modules into git for things you deploy, such as websites and apps. Do not check node_modules into git for libraries and modules intended to be reused. Use npm to manage dependencies in your dev environment, but not in your deployment scripts.


13. What is the `dist` folder? 

Parcel's default output for your files is in the dist folder. Since you specified the build script to output your files to a directory called public , Parcel generates this folder and outputs your production files into it


14. What is browserslist?
browserslist is a configuration file that determines which browsers your project should support. It is used by many tools, including Autoprefixer, Babel, and Stylelint, to automatically add vendor prefixes and polyfills to your CSS and JavaScript code.


 Read about dif bundlers: vite, webpack, parcel 



 Read about:  ^ - caret and ~ - tilda 

 Caret(^) is less safer than Tilde(~) for production app. because here minor feature will also update automatically . (Not sure our exiting function will support this update or not). Caret(^) is mainly used to automatic update in package for minor feature and bug fixes both.


  Read about Script types in html (MDN Docs) 